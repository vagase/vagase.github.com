<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[烫烫]]></title>
  <link href="http://vagase.me/atom.xml" rel="self"/>
  <link href="http://vagase.me/"/>
  <updated>2013-02-22T19:35:34+08:00</updated>
  <id>http://vagase.me/</id>
  <author>
    <name><![CDATA[vagase]]></name>
    <email><![CDATA[xubenyang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS IO 重定向（NSLog to UITextView）]]></title>
    <link href="http://vagase.me/blog/ios-io-redirect"/>
    <updated>2011-11-25T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/ios-io-redirect</id>
    <content type="html"><![CDATA[<h3>情形描述:</h3>

<p>在调试程序的时候，通过NSLog打印log，很方便的就可以在Xcode里面看到。但是程序一旦“离开XCode运行”， 比如将App交付给了公司的测试团队，怎样能够很随意看到NSLog打印的信息呢？通常在离开xcode之后，NSLog的信息会保存在Systemlog里面（<a href="http://octopress.dev/ios-osx-log-sys-in-deep-part1/">这里有NSLog详细描述</a>），你可以通过一定办法取出这个log。甚至可以写一套日志系统，然后将这些信息保存到日志中，然后导出或者上传自己的服务器。但是这些太麻烦了，简直是弱爆鸟。我们的目的是：在App里面能够直接像xCode console窗口那样显示NSLog的信息，准确的说是标准输出的信息。</p>

<!-- More -->


<h3>关键技术：IO重定向</h3>

<p>通过IO重定向，我们可以直接“截取” stdout,stderr等标准输出的信息（NSLog->stderr），然后再在自己的View上显示出来。</p>

<ol>
<li>通过NSPipe创建一个管道（<a href="http://www.cocoadev.com/index.pl?NSPipe">这里有详细讲NSPipe的文章</a>），pipe有读端和写端.</li>
<li>通过dup2（<a href="http://developer.apple.com/library/IOs/#documentation/System/Conceptual/ManPages_iPhoneOS/man2/dup2.2.html">这里有详细将dup2的文章&lt;</a>）讲标准输入重定向到pipe的写端。</li>
<li>通过NSFileHandle监听pipe的读端，然后讲读出的信息显示在uitextview上。</li>
</ol>


<h4>相关代码：</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">@</span><span class="n">implement</span> <span class="n">TestAppDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">redirectNotificationHandle:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="n">nf</span><span class="p">{</span>
</span><span class='line'>  <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[[</span><span class="n">nf</span> <span class="n">userInfo</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="n">NSFileHandleNotificationDataItem</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">data</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">logTextView</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@</span><span class="se">\n</span><span class="s">%@&quot;</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">logTextView</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="n">str</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSRange</span> <span class="n">range</span><span class="p">;</span>
</span><span class='line'>  <span class="n">range</span><span class="p">.</span><span class="n">location</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">logTextView</span><span class="p">.</span><span class="n">text</span> <span class="n">length</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">range</span><span class="p">.</span><span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">logTextView</span> <span class="nl">scrollRangeToVisible:</span><span class="n">range</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[[</span><span class="n">nf</span> <span class="n">object</span><span class="p">]</span> <span class="n">readInBackgroundAndNotify</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">redirectSTD:</span><span class="p">(</span><span class="kt">int</span> <span class="p">)</span><span class="n">fd</span><span class="p">{</span>
</span><span class='line'>  <span class="n">NSPipe</span> <span class="o">*</span> <span class="n">pipe</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPipe</span> <span class="n">pipe</span><span class="p">]</span> <span class="p">;</span>
</span><span class='line'>  <span class="n">NSFileHandle</span> <span class="o">*</span><span class="n">pipeReadHandle</span> <span class="o">=</span> <span class="p">[</span><span class="n">pipe</span> <span class="n">fileHandleForReading</span><span class="p">]</span> <span class="p">;</span>
</span><span class='line'>  <span class="n">dup2</span><span class="p">([[</span><span class="n">pipe</span> <span class="n">fileHandleForWriting</span><span class="p">]</span> <span class="n">fileDescriptor</span><span class="p">],</span> <span class="n">fd</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span>
</span><span class='line'>                                           <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">redirectNotificationHandle:</span><span class="p">)</span>
</span><span class='line'>                                               <span class="nl">name:</span><span class="n">NSFileHandleReadCompletionNotification</span>
</span><span class='line'>                                             <span class="nl">object:</span><span class="n">pipeReadHandle</span><span class="p">]</span> <span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">pipeReadHandle</span> <span class="n">readInBackgroundAndNotify</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span>
</span><span class='line'><span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">launchOption</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">redirectSTD:</span><span class="n">STDOUT_FILENO</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">redirectSTD:</span><span class="n">STDERR_FILENO</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//YOUR CODE HERE...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//YOUR CODE HERE...</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>一旦通过printf或者NSLog写数据，因为重定向过，这些数据都会写到Pipe的写端。同时pipe会将这些数据从写端直接传送到读端。读端通过NSFileHandle的“监控”函数取出这些数据，并最终显示在uitextview上。</p>

<h4>截图：</h4>

<p><a class="fancybox" href="http://vagase.me/myimages/io-redirect.png"><img src="http://vagase.me/myimages/io-redirect.png" width="300" height="400"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[乔布斯辞世]]></title>
    <link href="http://vagase.me/blog/steve-jobs-forever"/>
    <updated>2011-10-06T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/steve-jobs-forever</id>
    <content type="html"><![CDATA[<p>记住这一天 <code>10/5/2011</code>. 乔布斯永远离开了我们.</p>

<p>iPhone 4S ( iPhone for Steve ) : Jobs在世留给我们最后的礼物。</p>

<p><a class="fancybox" href="http://vagase.me/myimages/steve_forever.png"><img src="http://vagase.me/myimages/steve_forever.png" width="400" height="400"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jtop - Convert JSON to Plist]]></title>
    <link href="http://vagase.me/blog/convert-json-to-plist"/>
    <updated>2011-09-09T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/convert-json-to-plist</id>
    <content type="html"><![CDATA[<p>JSON格式很好，但是可阅读性相对较差，而且在mac下也没有很好的专门针对JSON的编辑器，一般都用文本编辑器，所以看起来非常累。</p>

<p>恰好，mac下的plist文件格式如果用系统自带的properties list editor（现在整合到Xcode4中了）打开阅读性非常好。于是自己写了一个小工具将JSON转换为plist文件输出。这样看起来就非常爽了～</p>

<p>两者阅读效果对比截图如下：</p>

<p><a class="fancybox" href="http://vagase.me/myimages/jtop.png"><img src="http://vagase.me/myimages/jtop.png" width="400" height="300"></a></p>

<p>Github地址：<a href="https://github.com/vagase/jtop">https://github.com/vagase/jtop</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C Singleton template]]></title>
    <link href="http://vagase.me/blog/objective-c-singleton-template"/>
    <updated>2011-05-24T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/objective-c-singleton-template</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://blog.mugunthkumar.com/coding/objective-c-singleton-template-for-xcode-4/">http://blog.mugunthkumar.com/coding/objective-c-singleton-template-for-xcode-4/</a></p>

<h4>_<strong>FILEBASENAME</strong>_.h</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;foundation /Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">___FILEBASENAMEASIDENTIFIER___</span> : <span class="nc">NSObject</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="n">___FILEBASENAMEASIDENTIFIER___</span><span class="o">*</span><span class="p">)</span> <span class="n">sharedInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- More -->


<h4>_<strong>FILEBASENAME</strong>_.m</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;___FILEBASENAME___.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">___FILEBASENAMEASIDENTIFIER___</span> <span class="o">*</span><span class="n">_instance</span><span class="p">;</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">___FILEBASENAMEASIDENTIFIER___</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark -</span>
</span><span class='line'><span class="cp">#pragma mark Singleton Methods</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">___FILEBASENAMEASIDENTIFIER___</span><span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">_instance</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">){</span>
</span><span class='line'>      <span class="k">@synchronized</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>        
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">_instance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>              <span class="c1">// Allocate/initialize any member variables of the singleton class here</span>
</span><span class='line'>              <span class="c1">// example</span>
</span><span class='line'>              <span class="c1">//_instance.member = @&quot;&quot;;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">allocWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span><span class="p">{</span>   
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">_instance</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">){</span>
</span><span class='line'>      <span class="k">@synchronized</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">_instance</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">allocWithZone:</span><span class="n">zone</span><span class="p">];</span>           
</span><span class='line'>              <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>  <span class="c1">// assignment and return on first allocation</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span> <span class="c1">//on subsequent allocation attempts return nil </span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">copyWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span> 
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">retain</span><span class="p">{</span> 
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span> 
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">unsigned</span><span class="p">)</span><span class="nf">retainCount</span><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UINT_MAX</span><span class="p">;</span>  <span class="c1">//denotes an object that cannot be released</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">release</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">//do nothing</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">autorelease</span><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span> 
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark -</span>
</span><span class='line'><span class="cp">#pragma mark Custom Methods</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Add your custom methods here</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS and Mac OS 调试信息输出（二）]]></title>
    <link href="http://vagase.me/blog/ios-osx-log-sys-in-deep-part2"/>
    <updated>2011-03-13T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/ios-osx-log-sys-in-deep-part2</id>
    <content type="html"><![CDATA[<h2>NSLog，没那么简单</h2>

<p>在前一篇<a href="http://vagase.github.com/ios-osx-log-sys-in-deep-part1/">《iOS and Mac OS 调试信息输出（一）</a>中介绍了输出调试信息的方法。现在讲主角：<code>NSLog</code>。</p>

<h3>1.NSLog工作流程</h3>

<p>前面已经说过我们很多时候都只是讲NSLog当做是printf，比printf好就好在：1. 自动添加了换行符；2. 在信息头还添加了一些其他更易于阅读和标示的信息，如“2011-03-12 20:18:34.000 Test14[40871:903]”。但其实NSLog更重要的功能是Log功能。看了下面这幅图你也许久明白了NSLog的工作原理了。</p>

<p><a class="fancybox" href="http://vagase.me/myimages/nslog.jpeg"><img src="http://vagase.me/myimages/nslog.jpeg" width="400" height="400"></a><br/>
<em>NSLog工作流程图</em></p>

<!-- More -->


<p>所以从图中可以看出NSLog的工作主要是分为：</p>

<ol>
<li>输出信息到终端</li>
<li>输出信息到System Log中去</li>
</ol>


<p>一般开发的时候程序都是从Xcode中启动，所以这个时候NSLog就具有打印信息到终端的能力就像printf一样（说fprintf(stderr, ….) 更合适一点）。而且很自然也就认为NSLog只是用来打印这些调试信息用的。</p>

<p>但是当程序不是从xcode或者ternimal启动等时，因为stderr不是被定向到标准终端这个时候NSLog的功能就是把信息输入到System Log中去。如果这个时候你也用的stderr输入信息，这个时候stderr会被定向到System Log中去。</p>

<h3>2. Log结构</h3>

<p>我之前说过Log信息是有level之分的，完整的Log是包含很多key-value形式的其他信息的，下面我们看一个通过NSLog输入到System Log的Log实例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'> ASLMessageID = 3827200;
</span><span class='line'> "CFLog Local Time" = "2011-03-12 16:31:02.592";
</span><span class='line'> "CFLog Thread" = 903;
</span><span class='line'> Facility = "com.apple.console";
</span><span class='line'> GID = 20;
</span><span class='line'> Host = "Xu-Benyangs-MacBook-Pro";
</span><span class='line'> Level = 4;
</span><span class='line'> Message = "Hello World!";
</span><span class='line'> PID = 27692;
</span><span class='line'> ReadUID = 501;
</span><span class='line'> Sender = Test14;
</span><span class='line'> Time = 1299918662;
</span><span class='line'> TimeNanoSec = 593334000;
</span><span class='line'> UID = 501;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>其中我们比较关注的有这几项：</p>

<ul>
<li>Facility：用一个反链接形式字符串标示发送Log的来源，比如NSLog内部就使用的是com.apple.console。</li>
<li>Level: 等级，NSLog的等级是4，也就是Warnning，根据之前我们多/private/etc/syslog.conf 查看，只要是在Notice(5)之上的Log都可以被记录到/private/var/system.log中去。所以你调用一个NSLog你就可以去看看你的system.log文件。</li>
<li>Message: 就是消息本省。</li>
<li>Sender：你的应用程序名称。</li>
</ul>


<p>所以从上面信息可以看出<strong>NSLog的Log是：Facility=“com.apple.console”; Level=4(每一条NSLog都当做是一个Warning Log)的信息。</strong>而顺便提一下stderr如果被定向到System Log，那么是：Facility=“user”， Level=5（每一条是当做一个Notice的Log）。</p>

<h3>3. 查看Log的方法</h3>

<p>那么NSLog既然主要作用是用来发送System Log的，那么如何可以方便查看这些Log呢？特别是哪些搞测试和调程序的同学来讲，看Log是做常见的事情，所以这里给出在Mac和iOS下在没有源代码或者脱离了Xcode运行环境怎么看Log的方法。</p>

<p><strong>Mac</strong></p>

<ul>
<li>如果你的systemlog.conf配置正确，就可以直接去查看这个文件 <code>/private/var/log/system.log</code></li>
<li>打开<code>/Applications/Utilities/Console</code>这个程序，在Log List中选Console Messages就可以查看所有程序的NSLog打印出来的信息了。如图：<br/>
<a class="fancybox" href="http://vagase.me/myimages/log-console-mac.png"><img class="center" src="http://vagase.me/myimages/log-console-mac.png" width="400" height="400"></a><br/>
如图所示，Console中也提供了查看system.log的快捷方式。这里可能对你造成困惑，为什么有了system.log还有一个Console Messages。其实说白了Console Messages只是讲system log 中facility为“com.apple.console”的都筛选出来了，所以你就姑且可以把Console Messages中的信息认识全部是NSLog产生的。但是其实如果你自己发送一个facility=“com.apple.console”的日志，同样会出现在Console Messages中。</li>
</ul>


<p><strong>iOS</strong></p>

<p>在真机上调试程序的时候打开Xcode 中的Oganizer, 然后在你当前的device下选取Console就可以看到这个Device的System Log了，如图。<br/>
<a class="fancybox" href="http://vagase.me/myimages/log-console-ios.png"><img class="center" src="http://vagase.me/myimages/log-console-ios.png" width="400" height="400"></a><br/>
这里我用的是xcode 4，所以界面和你的也许会不一样。</p>

<h3>4. 程序员使用NSLog注意事项</h3>

<p>在了解了NSLog的工作原理之后，你还敢像只是用printf那样使用NSLog了吗？我可以很负责人的告诉你虽然苹果的设备硬件条件都很牛B，但是NSLog还是是一件非常expensive的事情，主要体现在这两点：</p>

<ul>
<li>NSLog在打印信息的同时要发送日志，效率低</li>
<li>程序一些调试信息通过NSLog发送到System Log之后，很容易被其他人查看到，对你程序的安全性造成了直接的威胁。除了通过xcode的oganizer可以查看console，在iPhone上有一个叫<a href="http://itunes.apple.com/us/app/consolelog/id415116252?mt=8">ConsoleLog</a>的程序可以查看你的这些日志。</li>
</ul>


<p>所以综合这些因素，我们应该在程序release的时候尽量去掉NSLog，但是如果程序大了一个一个去删NSLog似乎也不现实。于是网上就有不少牛人提供了不少的解决方案。推荐一篇著名的Cocoa Is My Girlfriend的<a href="http://www.cimgf.com/2009/01/24/dropping-nslog-in-release-builds/">&#8220;Dropping NSLog in Release Build&#8221;</a>.</p>

<p><em>最后，感谢<a href="http://itunes.apple.com/us/app/camscanner-free/id388627783?mt=8">CamScanner</a>帮我把手绘直接扫描成电子版。</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS and Mac OS 调试信息输出（一）]]></title>
    <link href="http://vagase.me/blog/ios-osx-log-sys-in-deep-part1"/>
    <updated>2011-03-13T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/ios-osx-log-sys-in-deep-part1</id>
    <content type="html"><![CDATA[<h2>调试信息输出方法介绍</h2>

<p>在Apple <a href="http://developer.apple.com/library/ios/#technotes/tn2010/tn2239.html">Tech Note TN2239：iOS Debugging Magic</a>中提到了程序开发中Debug output 方法：</p>

<ol>
<li>NSLog</li>
<li>stderr</li>
<li>system log</li>
</ol>


<p>调试信息的输出主要有方式，一是通过输出到终端输出，二是输出到日志系统。下面讲介绍一下这几种输出调试信息的方式，首先从stderr说起。</p>

<h4>1. stderr （引用自TN2239）</h4>

<blockquote><p>Many programs, and indeed many system frameworks, print debugging messages to stderr. The destination for this output is ultimately controlled by the program: it can redirect stderr to whatever destination it chooses. However, in most cases a program does not redirect stderr, so the output goes to the default destination inherited by the program from its launch environment. This is typically one of the following:</p></blockquote>

<!-- More -->


<blockquote><ol>
<li><p>If you launch a GUI application as it would be launched by a normal user, the system redirects any messages printed on stderr to the system log. You can view these messages using the techniques described earlier.</p></li>
<li><p>If you run a program from within Xcode, you can see its stderr output in Xcode&#8217;s debugger Console window (choose the Console menu item from the Run menu to see this window).</p></li>
</ol>


<p>Attaching to a running program (using Xcode&#8217;s Attach to Process menu, or the attach command in GDB) does not automatically connect the program&#8217;s stderr to your GDB window. You can do this from within GDB using the trick described in the &#8220;Seeing stdout and stderr After Attaching&#8221; section of Technical Note <a href="http://developer.apple.com/technotes/tn/tn2030.html">TN2030</a>, &#8216;GDB for MacsBug Veterans&#8217;.</p></blockquote>

<p>这样一段代码在真机上跑：</p>

<p><code>NSLog(@"This is message from NSLog");</code><br/>
<code>fprintf(stderr, "This is message from stderr\n");</code></p>

<p>1）如果是通过Xcode调试加载运行这个程序，那么</p>

<p>在xcode的console中打印如下： <br/>
<code>2011-03-12 18:52:26.948 Test86[7891:307] This is message from NSLog</code><br/>
<code>This is message from stderr</code><br/>
在iPhone的system log中（通过Organizer的console查看）只打印:<br/>
<code>Sat Mar 12 18:52:26 unknown Test86[7891] &amp;lt;Warning&amp;gt;: This is message from NSLog</code></p>

<p>2）但是如果在iPhone上通过手指触摸启动这个程序，在iPhone的system log中会打印：<br/>
<code>Sat Mar 12 18:53:38 unknown Test86[7900] &amp;lt;Warning&amp;gt;: This is message from NSLog</code><br/>
<code>Sat Mar 12 18:53:38 unknown UIKitApplication:com.yourcompany.Test86[0x7d60][7900] &amp;lt;Notice&amp;gt;: This is message from stderr</code></p>

<p>说明确实stderr在user 自己launch的app中被重定向为system log，而且log的等级为Notice；NSLog的等级为Warning。</p>

<h4>2. system log</h4>

<p>其实system log是unix系统都有采用syslog协议的一个日志系统（<a href="http://tools.ietf.org/html/rfc5424">RFC详细讲解了这种协议</a>）。<br/>
每条日志是有等级的，主要分为如下等级：</p>

<ul>
<li>Level 0 – “Emergency”</li>
<li>Level 1 – “Alert”</li>
<li>Level 2 – “Critical”</li>
<li>Level 3 – “Error”</li>
<li>Level 4 – “Warning”</li>
<li>Level 5 – “Notice”</li>
<li>Level 6 – “Info”</li>
<li>Level 7 – “Debug”</li>
</ul>


<p>在创建好日志之后，通过调用API发送日志信息给一个叫做syslogd的守护进程，然后syslogd根据自己的配置文件（位于<code>/private/etc/syslog.conf</code>, <a href="http://study.chyangwa.com/IT/AIX/aixcmds5/syslogd.htm">具体怎么配置这篇文章说得很详细</a>），最后讲日志保存早自己的系统日志“数据库”里面。有兴趣的可以去打卡这个syslog.conf文件看看，我Mac上的配置文件是这样的：</p>

<p><code>*.notice;authpriv,remoteauth,ftp,install,internal.none     /var/log/system.log</code>（此处省去若干字。。。）</p>

<p>其中<code>*.notice</code>指明了任何等级比notice高的等级都要录入到 <code>/var/log/system.log</code> 这个文件中去。</p>

<p>在mac os和ios那么怎样调用  API讲日志发送给系统日志呢？有两种API：</p>

<ul>
<li><a href="https://developer.apple.com/library/ios/#documentation/System/Conceptual/ManPages_iPhoneOS/man3/syslog.3.html#//apple_ref/doc/man/3/syslog">syslog API（不要和之前syslog协议混淆</a></li>
<li><a href="https://developer.apple.com/library/ios/#documentation/System/Conceptual/ManPages_iPhoneOS/man3/asl.3.html">ASL: Apple System Log facility</a> 是苹果自己实现的一种可以同syslogd服务器交互，用来替换syslog API的实现。</li>
</ul>


<p>这里还有一些讲Syslog不错的文章,：</p>

<ul>
<li><a href="http://www.cocoanetics.com/2011/03/accessing-the-ios-system-log/">&#8220;Accesing the iOS system log&#8221;</a></li>
</ul>


<h4>3. NSLog</h4>

<p>NSLog应该是我们最熟悉的方式，其实也应该是每一个学习Objective C第一句会的语法，然后你对它真正了解多少？NSLog顾名思义，出去namespace NS 就是Log，其主要的功能就是为Cocoa程序编写人员提供一种简单的输入日志的方式。但是我们很多时候都讲其误认为是printf，而且也只是当printf用。如果是这样就太可惜了。</p>

<blockquote><p>NSLog is a high-level API for logging which is used extensively by Objective-C code. The exact behaviour of NSLog is surprisingly complex, and has changed significantly over time, making it beyond the scope of this document. However, it&#8217;s sufficient to know that NSLog prints to stderr, or logs to the system log, or both. So, if you understand those two mechanisms, you can see anything logged via NSLog.<a href="http://developer.apple.com/library/ios/#technotes/tn2010/tn2239.html">TN2239</a></p></blockquote>

<p>看见这个surprisingly complex也许就知道NSLog也许没那么简单了，我讲在另外一篇文章中详细讲解NSLog, <a href="http://vagase.github.com/2011/03/13/ios-osx-log-sys-in-deep-part2/">《iOS/Mac OS 调试信息输出（二）之 NSLog没那么简单》</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用NSZombieEnabled处理EXC_BAD_ACCESS]]></title>
    <link href="http://vagase.me/blog/handle-exc_bad_accesss-with-NSZombieEnabled"/>
    <updated>2011-03-10T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/handle-exc_bad_accesss-with-NSZombieEnabled</id>
    <content type="html"><![CDATA[<p>一直有件很头痛的事情就是在debug程序的时候经常出现程序crash然后在console就只是打印了EXC_BAD_ACCESS, 完全不知道问题具体出在哪里。这种情况一看就知道是对象指针出了问题，很大部分时候都是因为再次使用了一个已经完全dealloc的object。对于console的这种不负责任的报错，大家都表示纷纷不给力。其实只要你google一下EXC_BAD_ACCESS，就会得到很多很多的解决方案，这里我搜集了很多我认为讲得不错的文章和大家分享。</p>

<ul>
<li>CocoaDev，个人觉得讲Cocoa技术十分专业的网站之一，下面的链接详细讲了讲NSZombieEnable的原理。
  <a href="http://www.cocoadev.com/index.pl?NSZombieEnabled">http://www.cocoadev.com/index.pl?NSZombieEnabled</a></li>
<li>苹果官方的Mac OS X Debugging Magic, 详细讲述了最为一个高级苹果程序员应该具备的调试技巧。
  <a href="http://developer.apple.com/library/mac/#technotes/tn2004/tn2124.html">http://developer.apple.com/library/mac/#technotes/tn2004/tn2124.html</a></li>
<li>其实还可以在Instruments中开启NSZombie选项，这样就可以在Instruments中直接查看crash时候的call stack了。
  <a href="http://www.markj.net/iphone-memory-debug-nszombie/">http://www.markj.net/iphone-memory-debug-nszombie/</a></li>
</ul>


<p>最后提醒NSZombieEnabled只能在调试的时候使用，千万不要忘记在产品发布的时候去掉，因为NSZombieEnabled不会真正去释放dealloc对象的内存，一直开启后果可想而知，自重！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Mac Dictionary添加中英文翻译傻瓜教程]]></title>
    <link href="http://vagase.me/blog/add-custom-dict-for-mac"/>
    <updated>2011-01-28T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/add-custom-dict-for-mac</id>
    <content type="html"><![CDATA[<p>Dictionary是一个很牛B的东西，但是一直苦于Dictionary只能查看系统自带英文翻译和wiki等等，所以也就一直在用金山辞霸。金山词霸for mac的用户体验你懂的。。。为此一直很内伤。。。</p>

<p>今天google了一把，原来Dictionary是可以添加额外的词典库的。按需添加好很牛B的词典库之后就可以完全抛弃金山词霸了！具体步骤如下：</p>

<ol>
<li>因为Dictionary原生不支持添加词典，所以要借助一个第三方工具来添加：<a href="http://code.google.com/p/mac-dictionary-kit/downloads/list">DictUnifier</a></li>
<li>去这里下载你自己想要的词典库：<a href="http://yeelou.com/huzheng/stardict-dic/zh_CN/">http://yeelou.com/huzheng/stardict-dic/zh_CN/</a> （当然也有金山词霸字典库：<a href="http://yeelou.com/huzheng/stardict-dic/PowerWord/">http://yeelou.com/huzheng/stardict-dic/PowerWord/</a>），下载tarball格式。</li>
<li>下载下来后，直接将这个文件托到刚才的程序中去，然后就等待转换完成&#8230; &#8230;提示一下，下载下来的文件是一个压缩包，不要手贱去解压，直接将压缩包拖到DictUnifier去就行了，托进去可能要一点点时间等程序反应一下，耐心等。</li>
<li>在Dictionary App中选择你要使用的词典库：打开 配置/preference 你就知道该怎么干了。</li>
</ol>


<!-- More -->


<p>效果图如下：</p>

<p><a class="fancybox" href="http://vagase.me/myimages/dictionary.png"><img src="http://vagase.me/myimages/dictionary.png" width="400" height="400"></a></p>

<p>你可以选择Context Menu: Open Dictionary Panel 效果就是这样方便：</p>

<p><a class="fancybox" href="http://vagase.me/myimages/dictionary-panel.png"><img src="http://vagase.me/myimages/dictionary-panel.png" width="400" height="400"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Timer不靠谱]]></title>
    <link href="http://vagase.me/blog/timer-sucks"/>
    <updated>2010-12-12T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/timer-sucks</id>
    <content type="html"><![CDATA[<p>有了这两篇文章作为基础,可以很轻松理解这个问题，timer为什么不是一个精确记时工具，不是实时的。</p>

<ul>
<li><a href="http://vagase.github.com/ios-osx-log-sys-in-deep-part1/">&#8220;NSRunLoop概述和原理&#8221;</a></li>
<li><a href="http://vagase.github.com/how-to-make-timer/">&#8220;如何自己动手做timer&#8221;</a></li>
</ul>


<p>我们把环境都设置在Cocoa中，这里所讲的timer就用NStimer，当然这里的原理适用于其他系统的timer。</p>

<p>因为NSTimer是作为一种timer resource加入到NSRunLoop中去，在当timer的时间累计到规定时间之后就触发timer的action。从这个过程上看来timer应该是很“准时”的，而且现实情况也是这样的，比如一个规定每1s触发的timer绝大多数情况一般也是1s触发一次。但是timer的这种所谓的“准时”千万不要让你产生这样一种幻觉，“timer可以用来作精确的循环控制，比如用来精准控制动画”。</p>

<!-- More -->


<p>timer的不精确性主要是表现在：timer有可能delay或者丢失。具体有下面几种情形：</p>

<ol>
<li><p>runloop被堵塞了。</p>

<p> timer被加入到runloop中去，如果这个runloop堵塞了，举个例子说就是处理runloop的某个resource花了10S钟，而你的timer是1s触发一次，那么这个时候因为runloop被这个10s的任务所堵塞住了，就没有可能去处理timer了，于是按照<a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html">“Thread Programming Guide”</a>原文中的说法就是：</p>

<blockquote><p>“if a timer fires when the run loop is in the middle of executing a handler routine, the timer waits until the next time through the run loop to invoke its handler routine. If the run loop is not running at all, the timer never fires.”
 所以这种情况下，timer可能被delay甚至是丢失掉。</p></blockquote></li>
<li><p>runloop没有run或者run的model timer不支持。</p>

<p>加入timer加入的是defaule mode，但是这个时候用户在如<a href="http://vagase.github.com/nsrunloop-in-deep/">“NSRunLoop概述和原理”</a>中第一段代码中，用的是某个用户自己定于的mode在run这个runloop那么timer的计时就没有被累加。之有当runloop的model支持该timer的时候，该timer计时才会累计。</p></li>
</ol>


<p>所以timer只是一种非实时控制的，“粗略”地计时的一种工具，在通常我们对实时不太要求的时候timer满足我们的需求，但是如果对实时要求很高，比如游戏中，就得采取一些真正实时的手段来实现了。这里我想起了很早的时候看过的一份有戏代码，其中的动画效果都是由NSTimer来控制的，当时我就石化了，虽然游戏各种动画都还能看，但是明显不是很流畅，而且时快时慢。</p>

<p>结合上面说的，又会过头看看SDL中对timer的实现就实在是太简陋了，不过这种简单的timer系统有的时候反而能够提供很好的实时性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSRunLoop概述和原理]]></title>
    <link href="http://vagase.me/blog/nsrunloop-in-deep"/>
    <updated>2010-12-12T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/nsrunloop-in-deep</id>
    <content type="html"><![CDATA[<h2>1.什么是NSRunLoop？</h2>

<p>我们会经常看到这样的代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">start:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">pageStillLoading</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">NSThread</span> <span class="nl">detachNewThreadSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">loadPageInBackground:</span><span class="p">)</span><span class="nl">toTarget:</span><span class="n">self</span> <span class="nl">withObject:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">progress</span> <span class="nl">setHidden:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">pageStillLoading</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">runMode:</span><span class="n">NSDefaultRunLoopMode</span> <span class="nl">beforeDate:</span><span class="p">[</span><span class="n">NSDate</span> <span class="n">distantFuture</span><span class="p">]];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="n">progress</span> <span class="nl">setHidden:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码很神奇的，因为他会“暂停”代码运行，而且程序运行不会因为这里有一个while循环而受到影响。在[progress setHidden:NO]执行之后，整个函数想暂停了一样停在循环里面，等loadPageInBackground里面的操作都完成了以后才让[progress setHidden:YES]运行。这样做就显得简介，而且逻辑很清晰。如果你不这样做，你就需要在loadPageInBackground里面表示load完成的地方调用[progress setHidden:YES]，显得代码不紧凑而且容易出错。</p>

<!-- More -->


<p>那么具体什么是NSRunLoop呢？其实NSRunLoop的本质是一个消息机制的处理模式。如果你对vc++编程有一定了解，在windows中，有一系列很重要的函数SendMessage，PostMessage，GetMessage，这些都是有关消息传递处理的API。但是在你进入到Cocoa的编程世界里面，我不知道你是不是走的太快太匆忙而忽视了这个很重要的问题，Cocoa里面就没有提及到任何关于消息处理的API，开发者从来也没有自己去关心过消息的传递过程，好像一切都是那么自然，像大自然一样自然？在Cocoa里面你再也不用去自己定义WM_COMMAD_XXX这样的宏来标识某个消息，也不用在switch-case里面去对特定的消息做特别的处理。难道是Cocoa里面就没有了消息机制？答案是否定的，只是Apple在设计消息处理的时候采用了一个更加高明的模式，那就是RunLoop。</p>

<h2>2. NSRunLoop工作原理</h2>

<p>接下来看一下NSRunLoop具体的工作原理，首先是官方文档提供的说法，看图：</p>

<p><a class="fancybox" href="http://vagase.me/myimages/NSRunLoop-Infrastructure.png"><img src="http://vagase.me/myimages/NSRunLoop-Infrastructure.png"></a></p>

<p>通过所有的“消息”都被添加到了NSRunLoop中去，而在这里这些消息并分为“input source”和“Timer source” 并在循环中检查是不是有事件需要发生，如果需要那么就调用相应的函数处理。为了更清晰的解释，我们来对比VC++和iOS消息处理过程。</p>

<p>VC++中在一切初始化都完成之后程序就开始这样一个循环了（代码是从户sir mfc程序设计课程的slides中截取）：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="n">APIENTRY</span> <span class="nf">WinMain</span><span class="p">(</span><span class="n">HINSTANCE</span> <span class="n">hInstance</span><span class="p">,</span><span class="n">HINSTANCE</span> <span class="n">hPrevInstance</span><span class="p">,</span><span class="n">LPSTR</span>    <span class="n">lpCmdLine</span><span class="p">,</span><span class="kt">int</span> <span class="n">nCmdShow</span><span class="p">){</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">GetMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">msg</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">TranslateAccelerator</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">hwnd</span><span class="p">,</span> <span class="n">hAccelTable</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">msg</span><span class="p">)){</span>
</span><span class='line'>          <span class="n">TranslateMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>          <span class="n">DispatchMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到在GetMessage之后就去分发处理消息了，而iOS中main函数中只是调用了UIApplicationMain，那么我们可以介意猜出UIApplicationMain在初始化完成之后就会进入这样一个情形：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">UIApplicationMain</span><span class="p">(...){</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">running</span><span class="p">){</span>
</span><span class='line'>      <span class="p">[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">runMode:</span><span class="n">NSDefaultRunLoopMode</span> <span class="nl">beforeDate:</span><span class="p">[</span><span class="n">NSDate</span> <span class="n">distantFuture</span><span class="p">]];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以在UIApplicationMain中也是同样在不断处理runloop才是的程序没有退出。刚才的我说了NSRunLoop是一种更加高明的消息处理模式，他就高明在对消息处理过程进行了更好的抽象和封装，这样才能是的你不用处理一些很琐碎很低层次的具体消息的处理，在NSRunLoop中每一个消息就被打包在input source或者是timer source中了，当需要处理的时候就直接调用其中包含的相应对象的处理函数了。所以对外部的开发人员来讲，你感受到的就是，把source/timer加入到runloop中，然后在适当的时候类似于[receiver action]这样的事情发生了。甚至很多时候，你都没有感受到整个过程前半部分，你只是感觉到了你的某个对象的某个函数调用了。比如在UIView被触摸时会用touchesBegan/touchesMoved等等函数被调用，也许你会想，“该死的，我都不知道在那里被告知有触摸消息，这些处理函数就被调用了！？”所以，消息是有的，只是runloop已经帮你做了！为了证明我的观点，我截取了一张debug touchesBegan的call stack，有图有真相：</p>

<p><a class="fancybox" href="http://vagase.me/myimages/runloop-callstack.png"><img src="http://vagase.me/myimages/runloop-callstack.png"></a></p>

<p>现在会过头来看看刚才的那个会“暂停”代码的例子，有没有更加深入的认识了呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何自己动手做timer]]></title>
    <link href="http://vagase.me/blog/how-to-make-timer"/>
    <updated>2010-11-16T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/how-to-make-timer</id>
    <content type="html"><![CDATA[<p>有点标题党，最近在看开源游戏库<a href="http://www.libsdl.org">SDL</a>，只是因为要用到其中的thread和timer这些东西，所以就顺便看了看源代码，发现timer很精悍，所以分享其中的带代码。</p>

<p>1.首先通过init函数创建一个timer自己的thread（暂且叫timer线程），所以在使用timer之前一点要先调用init函数。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">SDL_SYS_TimerInit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">timer_alive</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">timer</span> <span class="o">=</span> <span class="n">SDL_CreateThread</span><span class="p">(</span><span class="n">RunTimer</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">timer</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">SDL_SetTimerThreaded</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">RunTimer</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">unused</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">timer_alive</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">SDL_timer_running</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">SDL_ThreadedTimerCheck</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">SDL_Delay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- More -->


<p>2.添加一个timer, 新建一个维护timer信息的内部struct，并讲这个struct添加到维护有所有在running的timer链表中去。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="n">SDL_TimerID</span> <span class="nf">SDL_AddTimerInternal</span><span class="p">(</span><span class="n">Uint32</span> <span class="n">interval</span><span class="p">,</span> <span class="n">SDL_NewTimerCallback</span> <span class="n">callback</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">param</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">SDL_TimerID</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>    <span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="n">SDL_TimerID</span><span class="p">)</span> <span class="n">SDL_malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">_SDL_TimerID</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">t</span><span class="o">-&gt;</span><span class="n">interval</span> <span class="o">=</span> <span class="n">ROUND_RESOLUTION</span><span class="p">(</span><span class="n">interval</span><span class="p">);</span>
</span><span class='line'>        <span class="n">t</span><span class="o">-&gt;</span><span class="n">cb</span> <span class="o">=</span> <span class="n">callback</span><span class="p">;</span>
</span><span class='line'>        <span class="n">t</span><span class="o">-&gt;</span><span class="n">param</span> <span class="o">=</span> <span class="n">param</span><span class="p">;</span>
</span><span class='line'>        <span class="n">t</span><span class="o">-&gt;</span><span class="n">last_alarm</span> <span class="o">=</span> <span class="n">SDL_GetTicks</span><span class="p">();</span>
</span><span class='line'>        <span class="n">t</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">SDL_timers</span><span class="p">;</span>
</span><span class='line'>        <span class="n">SDL_timers</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>        <span class="o">++</span><span class="n">SDL_timer_running</span><span class="p">;</span>
</span><span class='line'>        <span class="n">list_changed</span> <span class="o">=</span> <span class="n">SDL_TRUE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_TIMERS</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;SDL_AddTimer(%d) = %08x num_timers = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">interval</span><span class="p">,</span> <span class="p">(</span><span class="n">Uint32</span><span class="p">)</span> <span class="n">t</span><span class="p">,</span>
</span><span class='line'>           <span class="n">SDL_timer_running</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.timer线程的唯一工作就是不断地去更新timer的ticks,当发现timer的ticks满足interval的时候就触发timer并讲这个timer从链表中移出。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">SDL_ThreadedTimerCheck</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Uint32</span> <span class="n">now</span><span class="p">,</span> <span class="n">ms</span><span class="p">;</span>
</span><span class='line'>    <span class="n">SDL_TimerID</span> <span class="n">t</span><span class="p">,</span> <span class="n">prev</span><span class="p">,</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="n">SDL_bool</span> <span class="n">removed</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SDL_mutexP</span><span class="p">(</span><span class="n">SDL_timer_mutex</span><span class="p">);</span>
</span><span class='line'>    <span class="n">list_changed</span> <span class="o">=</span> <span class="n">SDL_FALSE</span><span class="p">;</span>
</span><span class='line'>    <span class="n">now</span> <span class="o">=</span> <span class="n">SDL_GetTicks</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="n">SDL_timers</span><span class="p">;</span> <span class="n">t</span><span class="p">;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">removed</span> <span class="o">=</span> <span class="n">SDL_FALSE</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ms</span> <span class="o">=</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">interval</span> <span class="o">-</span> <span class="n">SDL_TIMESLICE</span><span class="p">;</span>
</span><span class='line'>        <span class="n">next</span> <span class="o">=</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">last_alarm</span><span class="p">)</span> <span class="o">&gt;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">ms</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">struct</span> <span class="n">_SDL_TimerID</span> <span class="n">timer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="n">now</span> <span class="o">-</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">last_alarm</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">interval</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">t</span><span class="o">-&gt;</span><span class="n">last_alarm</span> <span class="o">+=</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">interval</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">t</span><span class="o">-&gt;</span><span class="n">last_alarm</span> <span class="o">=</span> <span class="n">now</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_TIMERS</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Executing timer %p (thread = %lu)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">SDL_ThreadID</span><span class="p">());</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>            <span class="n">timer</span> <span class="o">=</span> <span class="o">*</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>            <span class="n">SDL_mutexV</span><span class="p">(</span><span class="n">SDL_timer_mutex</span><span class="p">);</span>
</span><span class='line'>            <span class="n">ms</span> <span class="o">=</span> <span class="n">timer</span><span class="p">.</span><span class="n">cb</span><span class="p">(</span><span class="n">timer</span><span class="p">.</span><span class="n">interval</span><span class="p">,</span> <span class="n">timer</span><span class="p">.</span><span class="n">param</span><span class="p">);</span>
</span><span class='line'>            <span class="n">SDL_mutexP</span><span class="p">(</span><span class="n">SDL_timer_mutex</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">list_changed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="cm">/* Abort, list of timers modified */</span>
</span><span class='line'>                <span class="cm">/* FIXME: what if ms was changed? */</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">ms</span> <span class="o">!=</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">interval</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">ms</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">t</span><span class="o">-&gt;</span><span class="n">interval</span> <span class="o">=</span> <span class="n">ROUND_RESOLUTION</span><span class="p">(</span><span class="n">ms</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="cm">/* Remove timer from the list */</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_TIMERS</span>
</span><span class='line'>                    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;SDL: Removing timer %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">prev</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">SDL_timers</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="n">SDL_free</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>                    <span class="o">--</span><span class="n">SDL_timer_running</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">removed</span> <span class="o">=</span> <span class="n">SDL_TRUE</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="cm">/* Don&#39;t update prev if the timer has disappeared */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">removed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">prev</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">SDL_mutexV</span><span class="p">(</span><span class="n">SDL_timer_mutex</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个过程也阐述了timer的基本工作原理，所以也证明了timer不能用来作为精确控制，而且在SDL里面timer只能最多精确到10ms。
并且联系这个过程可以联想到Cocoa中的NSTimer，其实NSTimer也是这样被添加到NSRunloop中，然后到时间后就触发。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模仿UIAlertView，iOS模式对话框]]></title>
    <link href="http://vagase.me/blog/fake-uialertview"/>
    <updated>2010-11-13T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/fake-uialertview</id>
    <content type="html"><![CDATA[<p>在程序UI设计上，很多情况我们会需要一种模式的对话框来进行操作。现有的iOS提供如下方式满足这种需求:</p>

<ul>
<li>UIAlertView</li>
<li>UIViewController  : - (void)presentModalViewController:(UIViewController *)modalViewController animated:(BOOL)animated</li>
</ul>


<p>但是这两者明显都有不足，比如说UIAlertView官方只能显示title，message, buttons. 如果想要显示一个帐号密码输入框就不行（虽然网络上有一些程序员通过hack的方式实现了, <a href="http://stackoverflow.com/questions/376104/uitextfield-in-uialertview-on-iphone-how-to-make-it-responsive">http://stackoverflow.com/questions/376104/uitextfield-in-uialertview-on-iphone-how-to-make-it-responsive</a>， 但是现在还是挺费劲的），所以想要随心所欲的在多样化模式对话框的UI界面标准的lib明显不能满足这个需求。于是我就实现了一个可以任意设置界面的模式对话框，叫 BYDialog.在给这个东西命名上，我想找一个好的前缀，但是一直没有更好的想法，所以就自恋地直接用自己的中文名的拼音开头作了前缀。</p>

<!-- More -->


<h3>BYDialog核心思想:</h3>

<ul>
<li>新建一个UIWindow，其windowLevel比UIWindowLevelStatusBar大一点，这样就可以让显示的内容完全覆盖status bar了。</li>
<li>UIWindow背景透明，然后添加一个拥有灰灰背景图片的UIImageView，暂且加maskview。这样原来的内容就会有像UIAlertView一样的淡化效果，突出显示模式对话框的内容。</li>
<li>在UIWindow中添加BYDialog(是UIView的subclass)，BYDialog并显示bounce动画效果。</li>
</ul>


<p>这样就能够像UIAlertView一现显示出来了:)</p>

<h3>如何自定义BYDialog用户界面：<em>（具体可以参考TestDialog的实现）</em></h3>

<ul>
<li>subclass BYDialog, 然后<em>必须</em>改写<code>- (void)loadContentView;</code>，并提供你自己想要显示的UI内容，注意这个内容要适当大小，不要超出屏幕大小。</li>
<li>override <code>- (void)willPresentDialog;</code> <code>- (void)didPresentDialog;</code> <code>- (void)willDismissDialog;</code> <code>- (void)didDismissDialog;</code>并响应这种事件消息。</li>
<li>可以为自己的类提供各种delegate函数，根据以上捕捉到的事件消息或者其他地方，触发delegate函数调用。</li>
</ul>


<p>所以整个UIAlertView 模仿过程完成了，效果如截图：</p>

<p><a class="fancybox" href="http://vagase.me/myimages/bydialog.png"><img src="http://vagase.me/myimages/bydialog.png" width="400" height="400"></a></p>

<hr />

<p><strong>Github: <a href="https://github.com/vagase/BYDialog">https://github.com/vagase/BYDialog</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PC键盘在Mac下Command/Option键切换]]></title>
    <link href="http://vagase.me/blog/pc-keyboard-switch-command-option-kyes-on-mac"/>
    <updated>2010-08-18T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/pc-keyboard-switch-command-option-kyes-on-mac</id>
    <content type="html"><![CDATA[<p>一直以来有这么一种烦恼困扰着我，那就是把pc键盘和mac的兼容性。我之所以喜欢用mac，有很大一个原因是因为mac的commad键位设置得很舒服，每次复制粘贴手不用移动很大位置（不像windows），这个对一个程序员是很重要的。但是每当插上一个windows外界键盘的时候，win键默认为command，而alt默认是option，这就搞得command键位不是很舒服了，作为一个穷学生，又买不起mac外接键盘，只能这样默默地忍受着这种不和谐，心里默默流泪。</p>

<!-- More -->


<p>但是天晓得，原来mac是支持去修改键盘的command／option键位的，可以让你的pc键盘的commad键和option切换的！这真TMD太人性化了！可我就一直不知道。具体步骤如下：</p>

<p>打开键盘的系统设置,点击modifier keys：</p>

<p><a class="fancybox" href="http://vagase.me/myimages/modifier_keys.png"><img src="http://vagase.me/myimages/modifier_keys.png"></a></p>

<p>然后选择你要修改的键盘（笔记本会有默认键盘的）</p>

<p><a class="fancybox" href="http://vagase.me/myimages/modifier_keys_option.png"><img src="http://vagase.me/myimages/modifier_keys_option.png"></a></p>

<p>大功告成！享受到了前所未有的快感！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSManagedObject property没有实例变量的模拟]]></title>
    <link href="http://vagase.me/blog/nsmanagedobject-property-no-instance-variables-simulation"/>
    <updated>2010-08-15T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/nsmanagedobject-property-no-instance-variables-simulation</id>
    <content type="html"><![CDATA[<p>趁现在还记忆犹新，而且还小有兴奋，把自己怎么实现RT话题写下来。</p>

<p>这个问题其实是在我学习CoreData的时候就一直存在，在CoreData里面有一个“很酷”的类NSManagedObject，只要是找个类的子类，那么这些类的property只要申明并且在.m里面申明为dynamic就可以，而不需要为property指定特定的实力变量，用起来特别方便。这让我这个经常实用property的人觉得真的是匪夷所思啊。一直在想找个玩意儿到底是采用了什么魔法，才能够导致property和实力变量之间的依赖可以剥离。而且前段时间和Kevin同学一起讨论了一下，但是都表示没有头绪。</p>

<p>最近又刚好温习了一下 <a href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html">&#8220;Objective-C Runtime Programming Guide&#8221;</a>这才恍然大悟，于是花了一天的时间就实现出了类似的效果。并且通过这次实践，对动态语言到底有多动态又有了从来没有过的深入认识，这种感觉很过瘾。</p>

<!-- More -->


<p>具体是怎么实现的不想多讲，原理不难，过程也不复杂，自己看源代码去，但是要求对oc runtime要有所了解。最终的效果就是我实现一个叫SmartObject 的类，只要是从找个类继承下来的类就可以想NSManagedObject的子类那样不用给出实力变量就可以使用property了！具体使用如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;SmartObject.h&quot;</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">TestClass</span> : <span class="nc">SmartObject</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">location</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSDate</span> <span class="o">*</span><span class="n">date</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;TestClass.h&quot;</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">TestClass</span>
</span><span class='line'><span class="k">@dynamic</span> <span class="n">title</span><span class="p">;</span>
</span><span class='line'><span class="k">@dynamic</span> <span class="n">location</span><span class="p">;</span>
</span><span class='line'><span class="k">@dynamic</span> <span class="n">date</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果就可以这样使用了：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">TestClass</span> <span class="o">*</span><span class="n">_myObject</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">_myObject</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TestClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">_myObject</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;this is title&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">_myObject</span><span class="p">.</span><span class="n">location</span> <span class="o">=</span> <span class="s">@&quot;this is location&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">_myObject</span><span class="p">.</span><span class="n">date</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="n">_myObject</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="n">_myObject</span><span class="p">.</span><span class="n">location</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">([</span><span class="n">_myObject</span><span class="p">.</span><span class="n">date</span> <span class="n">description</span><span class="p">],</span> <span class="nb">nil</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>感觉是不是很酷啊～</p>

<hr />

<p><strong>Github: <a href="https://github.com/vagase/SmartObject">https://github.com/vagase/SmartObject</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIView创建不规则视图]]></title>
    <link href="http://vagase.me/blog/uiview-with-non-rect-shape"/>
    <updated>2010-08-06T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/uiview-with-non-rect-shape</id>
    <content type="html"><![CDATA[<p>总所周知，UIView都是方形的，并不能产生一个不规则的形状的view（小弟才疏学浅，目前确实没有发现能够创建真实不规则视图的方法，如果有，不吝赐教，感激涕零！）。为什么我们有创建不规则view的需求？如果只是为了在View上显示不规则图形那大可不必，直接讲不规则图形添加到view上，然后讲view的backgroundColor设置为UIColor clearColor就可以；但是之所以有这样的需求，很大部分就是为了判断不规则的图形去响应触摸事件，判断图形是否被触摸选中了这样的要求，我们最直接的想法就是每个不规则图形都是一个view，那么图形是否选中就可以通过UIResponder的那一系列触摸有关的响应函数得知了，所以这个时候我们就需要不规则的view。但是显示的杯具是，iOS并没有提供这样的不规则view，如果要完成刚才的需求，就只能手动判断触摸的点是否在不规则图形里面了，这有的时候将是一件比较痛苦的事情。那么现在提供一种“创建不规则view”的解决方案：</p>

<p>不知道大家有没有注意到UIView有这样一个函数：<code>- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event</code> 这个函数就是用来判断指定的点是否在View内，我们方法就是在这个函数中，如果point在指定的不规则图形内返回YES，反之就返回NO。这样不规则图形的bounds就相当于代表了view自己的bounds。这样当你触摸view的时候，当且只有当触摸到指定图形内才会使得view被触摸到，才会调用到UIResponder一系列触摸响应事件。</p>

<!-- More -->


<p>代码如下：</p>

<p><strong>RoundView.h</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyView</span> : <span class="nc">UIView</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">UIBezierPath</span> <span class="o">*</span><span class="n">_path</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">pointInside:</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">)</span><span class="n">point</span> <span class="nl">withEvent:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="n">event</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>RoundView.m</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Print current selector&#39;s name</span>
</span><span class='line'><span class="cp">#define PRINT_CURRENT_SEL NSLog(@&quot;&amp;lt;%@&amp;gt; %@&quot;, NSStringFromClass([self class]),NSStringFromSelector(_cmd))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// PrivateMethods</span>
</span><span class='line'><span class="c1">// This category provide private apis for RoundView class</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">RoundView</span><span class="nl">(PrivateMethods)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Initialize all view&#39;s state</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">_init</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Highlight view&#39;s border, better visual effect for testing.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">_highlightBorder</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">RoundView</span><span class="nl">(PrivateMethods)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">_init</span><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">_highlightBorder</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">clearColor</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Create path object as round rect</span>
</span><span class='line'>  <span class="n">_path</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIBezierPath</span> <span class="nl">bezierPathWithRoundedRect:</span><span class="n">CGRectInset</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">,</span>  <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="nl">cornerRadius:</span><span class="mi">60</span><span class="p">]</span> <span class="n">retain</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">_highlightBorder</span><span class="p">{</span>
</span><span class='line'>  <span class="n">CALayer</span> <span class="o">*</span><span class="n">theLayer</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">layer</span><span class="p">];</span>
</span><span class='line'>  <span class="n">theLayer</span><span class="p">.</span><span class="n">borderColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class='line'>  <span class="n">theLayer</span><span class="p">.</span><span class="n">borderWidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark -</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">RoundView</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aDecoder</span><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">((</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithCoder:</span><span class="n">aDecoder</span><span class="p">])){</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">_init</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithFrame:</span><span class="n">frame</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">_init</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawRect:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">rect</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="n">setFill</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">_path</span> <span class="n">fill</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">_path</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">dealloc</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">pointInside:</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">)</span><span class="nv">point</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">_path</span> <span class="nl">containsPoint:</span><span class="n">point</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark -</span>
</span><span class='line'><span class="cp">#pragma mark UIResponder touches</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesBegan:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span><span class="p">{</span>
</span><span class='line'>  <span class="n">PRINT_CURRENT_SEL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesMoved:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span><span class="p">{</span>
</span><span class='line'>  <span class="n">PRINT_CURRENT_SEL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesEnded:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span><span class="p">{</span>
</span><span class='line'>  <span class="n">PRINT_CURRENT_SEL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesCancelled:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span><span class="p">{</span>
</span><span class='line'>  <span class="n">PRINT_CURRENT_SEL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个demo中用到了3.2以后提供的UIBezierPath类，来创建一个图形的path，在pointInside:withEvent:中判断点是不是在图形的里面，如果是返回YES，反之NO。这样就用找个图形的path代表了view的bounds。那么即使你触摸在view内但是没有在找个图形上，touchesBegan就不会被调用，不会打印相应信息在console中。
所以这样这个view的边界就变成了这个不规则图形的边界了，就变相地创建出了一个不规则的view了！cheers！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSLog warning:"format not a string literal and no format arguments"]]></title>
    <link href="http://vagase.me/blog/nslog-warningformat-not-a-string-literal-and-no-format-arguments"/>
    <updated>2010-07-15T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/nslog-warningformat-not-a-string-literal-and-no-format-arguments</id>
    <content type="html"><![CDATA[<p>我觉得这个问题已经烦躁了我很久很久，因为自打我学习Objective c的时候，写这样一句是没有任何问题的：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;Mimi&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>而如今升级到SnowLeopard，用上Xcode 3.2之后，如果这么写总是会有一个“format not a string literal and no format arguments”另人烦躁的warning, 虽然比较恶心，但是还是看看为什么会有这个warning再说。</p>

<p>其实一切都是为了安全着想，加入你写了下面的一段程序：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">nameFormat</span> <span class="o">=</span> <span class="s">@&quot;%@ %@&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">firstName</span> <span class="o">=</span> <span class="s">@&quot;Jon&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">lastName</span> <span class="o">=</span> <span class="s">@&quot;Hess %@&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="n">nameFormat</span><span class="p">,</span> <span class="n">firstName</span><span class="p">,</span> <span class="n">lastName</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="err">；</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么就相当于<br/>
<code>NSLog(@"Jon Hess %@");</code></p>

<p>这样自然程序运行是有问题的！</p>

<!-- More -->


<p>所以为了避免这么无辜而且隐蔽的错误，xcode添加了类型检查。</p>

<p>但是如果你觉得你不需要xcode为你操这些心，方便才是王道的话，你可以在xcode里面将GCC 4.2-Warnings中的Typecheck Calls to printf/scanf选项去掉就可以解决问题：</p>

<p><a class="fancybox" href="http://vagase.me/myimages/nslog_type_check.png"><img src="http://vagase.me/myimages/nslog_type_check.png" width="400" height="400"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSURLConnection timeout失效问题]]></title>
    <link href="http://vagase.me/blog/nsurlconnection-timeout-issue"/>
    <updated>2010-05-20T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/nsurlconnection-timeout-issue</id>
    <content type="html"><![CDATA[<p>今天在编译3.0的程序时候无意中写了这么一段代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSMutableURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableURLRequest</span> <span class="nl">requestWithURL:</span><span class="s">@&quot;...&quot;</span> <span class="nl">cachePolicy:</span><span class="n">NSURLRequestReloadIgnoringLocalAndRemoteCacheData</span> <span class="nl">timeoutInterval:</span><span class="mi">15</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="s">@&quot;FUCK GFW THREE DAYS!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSData</span> <span class="o">*</span><span class="n">bodyData</span> <span class="o">=</span> <span class="p">[</span><span class="n">string</span> <span class="nl">dataUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">[</span><span class="n">request</span> <span class="nl">setValue:</span><span class="s">@&quot;text/xml; charset=utf-8&quot;</span> <span class="nl">forHTTPHeaderField:</span><span class="s">@&quot;Content-Type&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">request</span> <span class="nl">setValue:</span><span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%u&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">bodyData</span> <span class="n">length</span><span class="p">]]</span> <span class="nl">forHTTPHeaderField:</span><span class="s">@&quot;Content-Length&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">request</span> <span class="nl">setHTTPBody:</span> <span class="n">bodyData</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">request</span> <span class="nl">setHTTPMethod:</span> <span class="s">@&quot;POST&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">NSURLConnection</span> <span class="o">*</span><span class="n">connection</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLConnection</span> <span class="nl">connectionWithRequest:</span><span class="n">request</span> <span class="nl">delegate:</span><span class="n">self</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果由于本部龟速的网络导致程序迟迟没有反应，一直处于loading，但是很奇怪的是在15s之后程序仍然没有NSURLConnection fail之類的回调，我测试了一下程序最终在一分多钟以后才返回了，也就是说我们设置的timeout失效了。</p>

<!-- More -->


<h3>原因</h3>

<p>这个问题只有在3.0以及之后的os中才有的，而且只有在当调用了setHTTPBody之后才会出现timeout失效。这个是苹果公司对URL Loading System的在OS3.0中的一个改动，不过在我看来其实这就是一个bug！在setHTTPBody之后，request的timeout会被改为240s（这个你可以通过NSLog ［request timeoutInterval］查看），苹果开发人员的解释就是通常我们自己设置的太短的timeout其实是没什么作用的，尤其对移动设备上来讲与网络沟通需要的时间往往是比较长的，假如你的timeout是10s，在WWAN的网络环境下，可能才刚刚“bring WWAN Interface up”（不知道怎么翻译，囧）。所以自从OS 3后，如果设置了HTTP body的data，系统就会自动设置一个最低的timeout值，即240s，而且这个值都是不能被改动的，即是你自己再次设置了timeoutInterval，你通过NSLog ［request timeoutInterval］得到的还是240S！！</p>

<h3>解决方案</h3>

<p>这里我们就可以自己开启一个timer，然后将timer的interval设置为你想设置给connection的timeout，然后在timer的响应selector中讲connection cancel掉，这样就能够像原来一样在timeout之后cancel connection了。如果想同样像以前一样有- (void)connection:(NSURLConnection <em>)connection didFailWithError:(NSError </em>)error这样的回调信息，你自己在timer的selector中手动调用［delegate connection:theConnection didFailWithError: &#8230;］;就可以了，有点tricky，但是很实用。</p>

<p>PS：自己可以看一下的帖子：</p>

<ul>
<li><a href="https://devforums.apple.com/thread/25282">https://devforums.apple.com/thread/25282</a></li>
<li><a href="https://devforums.apple.com/message/14845#14845">https://devforums.apple.com/message/14845#14845</a></li>
<li><a href="https://devforums.apple.com/message/37677">https://devforums.apple.com/message/37677</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core Animation硬件加速切身体验]]></title>
    <link href="http://vagase.me/blog/core-animation-hardware-acceleration"/>
    <updated>2010-05-15T00:00:00+08:00</updated>
    <id>http://vagase.me/blog/core-animation-hardware-acceleration</id>
    <content type="html"><![CDATA[<p>一直以来对Core Animation的理解都只是停留在这个技术是用来做动画的。通过CA为什么会得到流畅的动画效果，那是因为Core Animation是提供硬件加速的。然后，就没有然后了。</p>

<p>因为毕设的一部分是做一个iPhone的视频播放器，当然渲染解码出来的数据就是一个问题了。最先用很粗糙的UIImageView通过setImage的方式来呈现每一帧的数据。额的个天啊，虽然视频是播放出来了，但是明显有很卡的感觉！而且如果UIImageView越大，那么越卡，也就是渲染一张图片的时间越长。于是就想到了最坏的打算：用OPENGL来渲染。但是本人一向对非navtive sdk的开发比较反感，因为和系统打交道比较麻烦，所以这只是最坏的打算。于是有投奔CALayer，通过CAlayer的contents来渲染每一帧，结果效果大让人满意，渲染每一帧所花的时间基本上是同UIImageView所需时间的<strong>60%</strong>左右！播放那是非常流畅！</p>

<!-- More -->


<p>总结，Core Animation有硬件加速支持，所以通过CALayer的contents来渲染帧数据就会得到硬件加速带来的好处。所以如果您以后有同样要高效播放视频或者是多张图片（往往在做动画效果的时候需要）的时候，如果UIImageView不能满足你的需求，就用CALayer吧！</p>
]]></content>
  </entry>
  
</feed>
