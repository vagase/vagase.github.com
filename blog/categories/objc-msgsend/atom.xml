<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: objc_msgSend | 烫烫烫]]></title>
  <link href="http://vagase.me/blog/categories/objc-msgsend/atom.xml" rel="self"/>
  <link href="http://vagase.me/"/>
  <updated>2013-02-26T20:33:05+08:00</updated>
  <id>http://vagase.me/</id>
  <author>
    <name><![CDATA[vagase]]></name>
    <email><![CDATA[xubenyang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[深入分析 objc_msgSend]]></title>
    <link href="http://vagase.me/blog/dig-objc-msgsend"/>
    <updated>2013-02-26T13:35:00+08:00</updated>
    <id>http://vagase.me/blog/dig-objc-msgsend</id>
    <content type="html"><![CDATA[<p>在Objective-C中，所有的<code>[receiver message]</code>都会转换为<code>objc_msgSend(receiver, @selector(message));</code>（<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html">Objective-C Runtime</a>）。所以相比c/c++这势必是有性能影响，下面就分析objc_msgSend源码看看这个cost到底有多大，并给出在特殊情况下改进方案。</p>

<!-- More -->


<p>在<a href="http://www.friday.com/bbum/2009/12/18/objc_msgsend-part-1-the-road-map/">「objc_msgSend() Tour」</a> 的系列文章中，已经通过对objc_msgSend汇编源码进行的详细分析，总结出objc_msgSend的处理流程：</p>

<blockquote><ol>
<li>Check for ignored selectors (GC) and short-circuit.</li>
<li>Check for nil target.

<ul>
<li> If nil &amp; nil receiver handler configured, jump to handler</li>
<li> If nil &amp; no handler (default), cleanup and return.</li>
</ul>
</li>
<li>Search the class’s method cache for the method IMP(use <strong>hash</strong> to find&amp;store method in cache)

<ul>
<li> If found, jump to it.</li>
<li> Not found: lookup the method IMP in the class itself corresponding its hierarchy chain.

<ul>
<li> If found, load it into cache and  jump to it.</li>
<li> If not found, jump to forwarding mechanism.</li>
</ul>
</li>
</ul>
</li>
</ol>
</blockquote>

<p>在另外一个博客中<a href="http://www.mulle-kybernetik.com/artikel/Optimization/opti-3.html">「Obj-C Optimization：Method and function call innards」</a>通过分析运行时的汇编代码，给出了更加直观的objc_msgSend运行流程。而且该大神在<a href="http://www.mulle-kybernetik.com/artikel/Optimization/opti-9.html">「Obj-C Optimization: The faster objc_msgSend」</a>给出了objc_msgSend实现的c语言版本，这个理解起来就更加容易了：</p>

<p><div><script src='https://gist.github.com/5037737.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>所以第一次调用某个method的时候，会需要运行500多行指令去寻找method并添加到cache；但是之后只需要运行30多行指令，通过hash方法直接在cache中找到相应method。所以可以认为：「<strong>objc_msgSend的cost大概在30多行指令</strong>」。这个cost是十分小的，对于现代CPU来说毛毛雨都不算，所以不用为objc_msgSend带来的cost操碎了心。</p>

<p>但是即使再微小的cost一旦累计多了，也可能带来很大的耗时，特别是一些常常会被调用的核心代码。所以必要时可以这样优化，通过<code>methodForSelector</code> 直接获得selector的IMP，将Objective-C method转换为c调用。于是我写了个小测试：</p>

<p><div><script src='https://gist.github.com/5037927.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>测试结果为：Objective-C Call Cost: <em>527.266ms</em>；C Call Cost:<em>330.790ms</em></p>

<p>从上面测试表明，C调用方式比OC调用方式将近快了2倍。如果运行速度成为了程序的瓶颈，采取上面的方法给程序提速不失为一个不错的选择。</p>
]]></content>
  </entry>
  
</feed>
